from selenium import webdriver
from selenium.webdriver import Firefox
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC,\
    expected_conditions
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from os import devnull

import re
from _datetime import datetime, timedelta

from tkinter import Tk, Button, Label, constants, Checkbutton, BooleanVar, Text,\
    Scrollbar, StringVar, Frame, Radiobutton
from pyautogui import moveTo
from time import sleep
from selenium.webdriver.support.expected_conditions import alert_is_present
from lib2to3.pgen2.tokenize import Ignore
import HelperFunctions
from sys import exc_info
from selenium.webdriver.firefox.options import Options

import atexit

def getDaysForward(daysForward, weekdaysOK=False):
    target_Date_dateTime =datetime.now() + timedelta(days = daysForward)
    
    if target_Date_dateTime.weekday()>4 and not weekdaysOK:
        return False
    
    month = str(target_Date_dateTime.month)
    thisDay = str(target_Date_dateTime.day)
    
    if len(month)==1:
        month = "0" + month
    if len(thisDay)==1:
        thisDay = "0" + thisDay
    
    return str(target_Date_dateTime.year) + "-" + month + "-" + thisDay

def queryDatesAndTimes(allConts):
    dates=[]
    returnDates = []
    dateButtons = []
    dateValues=[]
    returnTimes = []
    timeButtons = []
    timeValues=[]
    today = datetime.now()
    
    
    daysForward = ""
    
    if today.weekday()<2:
        daysForward = 3
    else:
        daysForward = 5
    #remove the +1 for actual use
    for i in range(daysForward+1):
        thisDay = getDaysForward(i)
        if thisDay:
            dates.append(thisDay)
    
    bgC = "lavender"
    top = Tk()
    top.config(bg = bgC)
    L1 = Label(top, text="Please select the acceptable dates/times\nfor the new RVs", bg = bgC, padx = 20)
    L1.config(font=("serif", 16))
    L1.grid(row=0, column=0, sticky=constants.W+constants.E, columnspan = 2)
    
    start = [0]
    
    i=1
    for date in dates:
        check = BooleanVar()
        checkButton = Checkbutton(top, text=date, variable=check, bg="royal blue", font=("serif", 12))
        checkButton.grid(row=i, column=0, sticky=constants.W+constants.E, pady=0)
        if i>1 and allConts:
            check.set(True)
        i+=1
        checkButton.bind("<Button-1>", lambda event: selectstart(start, dateButtons, event))
        checkButton.bind("<Shift-Button-1>", lambda event: selectrange(start, dateButtons, event))
        dateButtons.append(checkButton)
        dateValues.append((check, date))
    
    time_Order = ["04", "05","06","07","08","09","10","11","12","13","14","16","18","19","20", "00"]
    
    def selectstart(start, chkbuttons, event):
        start[0]= chkbuttons.index(event.widget)
        
    def selectrange(start, chkbuttons, event):
        startLocal = start[0]
        end = chkbuttons.index(event.widget)
        sl = slice(min(startLocal, end)+1, max(startLocal, end))
        for cb in chkbuttons[sl]:
            cb.toggle()
        start[0] = startLocal
        
    
    for i in range(len(time_Order)): 
        check=BooleanVar()
        cb = Checkbutton(text=time_Order[i]+":00",padx=0,pady=0,bd=0, variable=check, bg="dark violet", font=("serif", 12))
        cb.grid(row = i+1, column = 1, sticky=constants.W+constants.E+constants.N+constants.S)
        cb.bind("<Button-1>", lambda event: selectstart(start, timeButtons, event))
        cb.bind("<Shift-Button-1>", lambda event: selectrange(start, timeButtons, event))
        timeValues.append((check, time_Order[i]))
        timeButtons.append(cb)
#     start, timeButtons, 
    
    
    
    def callbackDates():
        for button, date in dateValues:
            if button.get():
                returnDates.append(date)
        for button, time in timeValues:
            if button.get():
                returnTimes.append(time)  
        top.destroy()
    

    
    MyButton = Button(top, text="OK", command=callbackDates)
    MyButton.grid(row=i+2, column=0, sticky=constants.W+constants.E, padx = 20, pady = (0,20), columnspan = 2)
    MyButton.config(font=("serif", 30), bg="green")
      
    top.update()
    
    w = top.winfo_width() # width for the Tk root
    h = top.winfo_height() # height for the Tk root
       
    ws = top.winfo_screenwidth() # width of the screen
    hs = top.winfo_screenheight() # height of the screen
    x = (ws/2) - (w/2)
    y = (hs/2) - (h/2)
    
    top.geometry('%dx%d+%d+%d' % (w, h, x, y))
    top.update()
    
    top.lift()
    top.attributes('-topmost',True)
    top.after_idle(top.attributes,'-topmost',False)
    moveTo(MyButton.winfo_width()/2 + MyButton.winfo_rootx(), MyButton.winfo_height()/2 + MyButton.winfo_rooty())
    
    top.mainloop()
    
    return returnDates, returnTimes

def queryContainers():
    containers = []
#     for i in range(6):
#         day = today + timedelta(days = i)
#         dates.append(str(day.year) + "-" + str(day.month) + "-" + str(day.day))
    
    bgC = "lavender"
    top = Tk()
    top.config(bg = bgC)
    L1 = Label(top, text="Please enter the containers to run on, and\nwhat day their current RVs are", bg = bgC, padx = 20)
    L1.config(font=("serif", 16))
    L1.grid(row=0, column=0, sticky=constants.W+constants.E)
    
    S1=Scrollbar(top, orient='vertical')
    S1.grid(row=1, column=1, sticky=constants.N + constants.S)
    S2=Scrollbar(top, orient='horizontal')
    S2.grid(row=2, column=0, sticky=constants.E + constants.W)
    
    T1 = Text(top, height = 33, width = 97, xscrollcommand = S2.set, yscrollcommand=S1.set, wrap = constants.NONE)
    T1.grid(row=1, column=0)
    T1.insert("end", "ALL")
    
    f1 = Frame(top)
    f1.grid(row=4, column=0) 
    
    checkHeadless = BooleanVar()
    checkHeadless.set(True)
    cb = Checkbutton(f1, text="Run in background?", variable=checkHeadless, bg="brown1", font=("serif", 12))
    cb.grid(row=0, column=0, pady=(10,0), padx = 20)
    
    checkDelivery = BooleanVar()
    cb = Checkbutton(f1, text="Delivery RVs?", variable=checkDelivery, bg="brown1", font=("serif", 12))
    cb.grid(row=0, column=1, pady=(10,0), padx = 20)
    
    def callbackCont():
        containers.append(T1.get("1.0", constants.END).splitlines())
        top.destroy()
        
    dates=[]
            
    daysForward = ""
    
    if datetime.now().weekday()<2:
        daysForward = 3
    else:
        daysForward = 5

    if (datetime.now().hour>7 and datetime.now().minute>46) or datetime.now().hour>8:
        daysForward+=1
    for i in range(daysForward):
        dates.append(getDaysForward(i, True))    
    
    date=StringVar()
    f = Frame(top)
    f.grid(row=3, column=0)
    for dateStr in dates:
        Radiobutton(f, text=dateStr, variable=date, value=dateStr, indicatoron=0, bg="royal blue", font = ("serif", 16)).pack(side="left")
    
    MyButton = Button(top, text="OK", command=callbackCont)
    MyButton.grid(row=5, column=0, sticky=constants.W+constants.E, padx = 20, pady = 10)
    MyButton.config(font=("serif", 30), bg="green")
      
    top.update()
    
    w = top.winfo_width() # width for the Tk root
    h = top.winfo_height() # height for the Tk root
       
    ws = top.winfo_screenwidth() # width of the screen
    hs = top.winfo_screenheight() # height of the screen
    x = (ws/2) - (w/2)
    y = (hs/2) - (h/2)
    
    top.geometry('%dx%d+%d+%d' % (w, h, x, y))
    top.update()
    moveTo(MyButton.winfo_width()/2 + MyButton.winfo_rootx(), MyButton.winfo_height()/2 + MyButton.winfo_rooty())
    
    top.mainloop()
    
    return containers[0], date.get(), checkHeadless.get(), checkDelivery.get()


def setupCn(headlessBrowser):
    options = Options()
    options.set_headless(headless=headlessBrowser)
    fp = FirefoxProfile();
    fp.set_preference("webdriver.load.strategy", "unstable");
#     fp.set_preference("XRE_NO_WINDOWS_CRASH_DIALOG=1")
     
    driver = Firefox(firefox_profile=fp, log_path=devnull, firefox_options=options)
    driver.get("http://cn.ca/")
#     driver.set_window_position(1920, 0)
#     sleep(30)
    driver.maximize_window()
    
    driver.implicitly_wait(100)
    
    f=open(r"J:\LOCAL DEPARTMENT\Automation - DO NOT MOVE\CN Login.txt", 'r')
    read = f.readline()
    m = re.search("username: *", read)
    username = read[m.end():].rstrip()
    read = f.readline()
    m = re.search("password: *", read)
    password = read[m.end():].rstrip()
    f.close()    
    
    driver.find_element_by_class_name("lbl").click()
    
    driver.find_element_by_id("login_usernameNew").send_keys(username)
    driver.find_element_by_id("login_passwordNew").send_keys(password)
    driver.find_element_by_id("loginform_enterbutton").click()
    
    return driver


def getBetterRVs(driver, containers, date, acceptableTimes, targetDates, headlessBrowser, delivery):
    allConts = containers[0]=="ALL"
    weekend = not getDaysForward(int(date[-2:]) - datetime.now().day)
#     driver.implicitly_wait(100)
#     sleep(30)
    driver.switch_to.frame("menuHeader")
    driver.find_element_by_id("id41").click()
#     driver.find_element_by_css_selector('a[id*="id18"][class*="label"]').click()
#     print(1)
    driver.switch_to_default_content()
    driver.switch_to_frame(driver.find_element_by_css_selector("frame[name='content1']"))
    i = 2
    found = False
    driver.implicitly_wait(0)
    while not found:
        try:
#             print(i)
            driver.switch_to_default_content()
            currentFrame = driver.find_element_by_css_selector("frame[name='content" + str(i) + "']")
            driver.switch_to_frame(currentFrame)
            driver.find_element_by_css_selector("form[action='AppointmentQuery']")
            found = True
        except:
            if i<30:
                i+=1
            else:
                i=2
    driver.implicitly_wait(600)
    sel =Select(driver.find_element_by_name("terminalId")) 
#     print(sel.first_selected_option())
#     print(sel.first_selected_option().name())
#     while sel.first_selected_option() != 
    sel.select_by_visible_text("BRAMPTON INTERMODAL")
    
    elem= driver.find_element_by_name("appointmentDate")
    elem.clear()
    elem.send_keys(date)
    
    ignore_list=[]
    
    driver.find_element_by_id("btn_23").click()
    
    try:
        table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
        rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
    except:
        table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
        rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
        
    badTimes = [
        "00",
        "20",
        "19",
        "18"
        ]
    
    if not delivery:
    
        def check_RVs():
            nonlocal rows
            i=0
            while i < len(rows):
                cells = rows[i].find_elements_by_css_selector("td")
                time = cells[3].text[:2]
                if int(time)>16 or time=="00" or weekend:
                    contNum =cells[8].text
                    if cells[5].text=="Pickup" and not contNum in ignore_list:
                        cells[6].click()
                        driver.find_element_by_name("Modify").click()
                        if "No record of equipment" in driver.page_source:
        #                     print("no record")
                            elem1 = driver.find_element_by_name("Cancel")
                            elem1.click()
                            if time in badTimes:
                                elem2 = driver.find_element_by_name("Cancel")
                                while elem1.id == elem2.id:
                                    elem2= driver.find_element_by_name("Cancel")
                                elem2.click()
                                while not "Gate Appointment Inquiry" in driver.page_source:
                                    driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
                                wait = WebDriverWait(driver, 10000)
                                wait.until(lambda driver: "Gate Appointment Inquiry" in driver.page_source)
                                rows = driver.find_element_by_css_selector("table[class='TableStandardBG']").find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
                                break
        #                     else:
        #                         ignore_list.append(contNum)
                        elif("Equipment entered is not destined" in driver.page_source):
                            ignore_list.append(contNum)
                        driver.find_element_by_name("Cancel").click()
                        while not "Gate Appointment Inquiry" in driver.page_source:
                                driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
                        wait = WebDriverWait(driver, 100)
                        wait.until(lambda driver: "Gate Appointment Inquiry" in driver.page_source)
                        rows = driver.find_element_by_css_selector("table[class='TableStandardBG']").find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
                i+=1
            return True
    
        done = False
        
        
        while not done:
            done = check_RVs()
#         
        
        
        
    time_Order = ["05","06","07","08","04","09","11","12","13","14","10","16","18","19","20","00"] 
    preference_Order = list(time_Order)
    try:
        table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
        rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
    except:
        table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
        rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
            
    if not delivery:
        last_time = ""
        
        for row in reversed(rows):
    #         time1 = datetime.now()
            cells = row.find_elements_by_css_selector("td")
    #         time2 = datetime.now()
            
            if (cells[5].text=="Pickup" and not delivery) or (cells[5].text=="Delivery" and delivery):
                last_time = cells[3].text[:2]
                break
        
        for time in list(time_Order):
            if int(last_time)<int(time):
                time_Order.remove(time)
                
        cur_time = time_Order.pop()
    
#     containersWithETADict={}
    
        def get_worst_RV(driver):
    #         print("here")
            nonlocal cur_time
            nonlocal allConts
            table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
            rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
            while True:
                if (int(cur_time)<18 and cur_time!="00") and allConts and not weekend:
                    HelperFunctions.done()
                    driver.quit()
                    exit()
                for row in rows:
                    cells = row.find_elements_by_css_selector("td")
                    if cells[5].text=="Pickup":
                        time = cells[3].text[:2]
                        contNum =cells[8].text
                        if time=="00":
                            if not contNum in ignore_list and (allConts or contNum in containers or contNum[:4]+contNum[5:11] in containers):
                                cells[6].click()
                                driver.find_element_by_name("Modify").click()
                                return contNum
                        else:
                            break
                for row in reversed(rows):
                    cells = row.find_elements_by_css_selector("td")
                    if (cells[5].text=="Pickup" and not delivery) or (cells[5].text=="Delivery" and delivery):
                        time = cells[3].text[:2]
                        contNum =cells[8].text
                        if time==cur_time and not contNum in ignore_list and (allConts or contNum in containers or contNum[:4]+contNum[5:11] in containers):
                            cells[6].click()
                            driver.find_element_by_name("Modify").click()
                            return contNum
                if len(time_Order)==0:
                    HelperFunctions.done()
                    driver.quit()
                    exit()
                else:
                    cur_time = time_Order.pop()
                
                
        driver.implicitly_wait(600)
    else:
        cur_time = "00"
    
    
    def get_RV(rv):
        table = driver.find_element_by_css_selector("table[class='TableStandardBG']")
        rows = table.find_element_by_css_selector("table[id='listingTable']>tbody").find_elements_by_css_selector("tr")
        for row in rows:
            cells = row.find_elements_by_css_selector("td")
            if rv in cells[6].text:
                cells[6].click()
                driver.find_element_by_name("Modify").click()
    
    def take_appointment_time(target_Date, contNum):
        nonlocal allConts
#         nonlocal containersWithETA
#         nonlocal containersWithETADict
        foundAGoodOne = False
        switch = False
        try:
            Select(driver.find_element_by_id("alternateDate")).select_by_visible_text(target_Date)
        except:
            driver.switch_to_alert().accept()
            driver.switch_to_default_content()
            driver.switch_to_frame(driver.find_element_by_css_selector("frame[name='content1']"))
            i = 2
            found = False
            driver.implicitly_wait(0)
            while not found:
                try:
                    driver.switch_to_default_content()
                    currentFrame = driver.find_element_by_css_selector("frame[name='content" + str(i) + "']")
                    driver.switch_to_frame(currentFrame)
    #                 driver.find_element_by_css_selector("form[action='AppointmentQuery']")
#                     driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']")
                    driver.find_element_by_id("alternateDate")
                    found = True
                except:
#                     print(i)
                    if i<30:
                        i+=1
                    else:
                        i=2
                             
                 
            driver.implicitly_wait(600)
            Select(driver.find_element_by_id("alternateDate")).select_by_visible_text(target_Date)
#         print("here")
#         driver.find_element_by_css_selector('input[onclick="beforeSubmit();saveActionAndSubmit(\'CheckAvailability\', \'GateAppointmentForm\', \'actionId\')"]').click()
        wait = WebDriverWait(driver, 100)
        elem = wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, 'input[onclick="beforeSubmit();saveActionAndSubmit(\'CheckAvailability\', \'GateAppointmentForm\', \'actionId\')"]')))
        elem.click()
        driver.implicitly_wait(0)
        try:
            times = driver.find_elements_by_name("alternateTimeChecked")
            driver.implicitly_wait(600)
            buttonTime = "00"
            button4=""
            button10=""
            for button in times:
                buttonTime =button.get_attribute('value')
                if acceptableTimes and not buttonTime[:2] in acceptableTimes:
                    continue
                if buttonTime=="00:00":
                    continue
                if buttonTime=="04:00":
                    button4=button
                    continue
                if int(buttonTime[:2])<9:
                    button.click()
                    button4=""
                    break
                if button4:
                    button4.click()
                    break
                if buttonTime=="09:00":
                    button.click()
                    break
                if buttonTime=="10:00":
                    button10=button
                if int(buttonTime[:2])<16:
                    button10=""
                    button.click()
                    break
                if button10:
                    button10.click()
                    break
                if buttonTime=="16:00":
                    button.click()
                    break
                else:
                    button.click()
                    break
            if button4:
                button4.click()
            if button10 and not button4:
                button10.click()
            if (preference_Order.index(buttonTime[:2])<preference_Order.index(cur_time) 
                    and (not acceptableTimes or buttonTime[:2] in acceptableTimes)
                    and not (buttonTime=="20:00")
                    and not ((buttonTime=="19:00" or buttonTime=="18:00") and not target_Date==date)) \
                or \
                (not allConts
                    and (not acceptableTimes or buttonTime[:2] in acceptableTimes)):
#                 print("clicking")
                driver.find_element_by_name("Save").click()
                wait = WebDriverWait(driver, 100)
                wait.until(alert_is_present())
                driver.switch_to_alert().accept()
                foundAGoodOne = True
                switch = True
            elif("The equipment's ETA of" in driver.page_source):
#                 if not contNum in containersWithETA:
#                     ignore_list.append(contNum)
#                     foundAGoodOne = True
#                     driver.find_element_by_name("Cancel").click()
#                     driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
#                     print(contNum)
#                     print(target_Date)
#                     containersWithETA.append(contNum)
                if len(targetDatesTemp)>0:
                    targetDatesTemp.remove(target_Date)
                else:
                    ignore_list.append(contNum)
                     
                    driver.find_element_by_name("Cancel").click()
                    driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
                    return True
#                 else:
#                     containersWithETADict[contNum].append(target_Date) 
                     
                         
#                 print("ETA")
    #             else:
    #                 driver.find_element_by_name("Cancel").click()
            if switch:
                driver.switch_to_default_content()
                driver.switch_to_frame(driver.find_element_by_css_selector("frame[name='content1']"))
                i = 2
                found = False
                driver.implicitly_wait(0)
                while not found:
                    try:
                        driver.switch_to_default_content()
                        currentFrame = driver.find_element_by_css_selector("frame[name='content" + str(i) + "']")
                        driver.switch_to_frame(currentFrame)
        #                 driver.find_element_by_css_selector("form[action='AppointmentQuery']")
                        driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']")
                        found = True
                    except:
                        if i<30:
                            i+=1
                        else:
                            i=2
                             
                 
                driver.implicitly_wait(600)
                if "No appointments were available for the window" in driver.page_source:
                    driver.find_element_by_name("Modify").click()
                    foundAGoodOne = False
                    print(datetime.now())
                    print("Missed: " + buttonTime)
#                     take_appointment_time(target_Date, contNum)
                else:
                    print(datetime.now())
                    print(contNum)
                    print("Old time: " + cur_time + "  and date: " + date)
                    print("New time: " + buttonTime+ "  and date: " + target_Date + "\n")
                    driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
        except:
            driver.find_element_by_name("Cancel").click()
            driver.find_element_by_css_selector("img[src='/ImxEbusWeb/images/english/Back.gif']").click()
            print(exc_info())
        return foundAGoodOne
    
    startTime = datetime.now()
    
    rvs = list(containers)
    rv = rvs[0]
    while len(rvs)>0:
        if datetime.now()-startTime>timedelta(seconds=60):
            driver.close()
            driver = setupCn(headlessBrowser)
        #     driver.implicitly_wait(100)
        #     sleep(30)
            driver.switch_to.frame("menuHeader")
            driver.find_element_by_id("id41").click()
        #     driver.find_element_by_css_selector('a[id*="id18"][class*="label"]').click()
        #     print(1)
            driver.switch_to_default_content()
            driver.switch_to_frame(driver.find_element_by_css_selector("frame[name='content1']"))
            i = 2
            found = False
            driver.implicitly_wait(0)
            while not found:
                try:
        #             print(i)
                    driver.switch_to_default_content()
                    currentFrame = driver.find_element_by_css_selector("frame[name='content" + str(i) + "']")
                    driver.switch_to_frame(currentFrame)
                    driver.find_element_by_css_selector("form[action='AppointmentQuery']")
                    found = True
                except:
                    if i<30:
                        i+=1
                    else:
                        i=2
            driver.implicitly_wait(600)
            sel =Select(driver.find_element_by_name("terminalId")) 
        #     print(sel.first_selected_option())
        #     print(sel.first_selected_option().name())
        #     while sel.first_selected_option() != 
            sel.select_by_visible_text("BRAMPTON INTERMODAL")
            elem= driver.find_element_by_name("appointmentDate")
            elem.clear()
            elem.send_keys(date)
            
            driver.find_element_by_id("btn_23").click()
            
            startTime = datetime.now()
        if not delivery:
            contNum = get_worst_RV(driver)
            targetDatesTemp = targetDates
            gotRV = False
            while not gotRV:
                if datetime.now()-startTime>timedelta(seconds=60):
                    break
                for day in targetDatesTemp:
                    gotRV = take_appointment_time(day, contNum)
                    if gotRV:
                        break
            
            if not allConts:
                allCont = True
                for container in containers:
                    allCont = allCont and container in ignore_list
                if allCont:
                    HelperFunctions.done()
                    driver.quit()
                    exit()
        else:
            targetDatesTemp = targetDates
            gotRV = False
            get_RV(rv)
            while not gotRV:
                if datetime.now()-startTime>timedelta(seconds=60):
                    break
                for day in targetDatesTemp:
                    gotRV = take_appointment_time(day, "None")
                    if gotRV:
                        rvs.remove(rv)
                        if len(rvs)>0:
                            rv = rvs[0]
                        else:
                            HelperFunctions.done()
                            driver.quit()
                            exit()
                        break
    
# APHU 721875 
    
if __name__ == '__main__':
    
#     driver = setupCn(False)
#     exit()
    
    
    
    
#     time1 = datetime.now()
#     sleep(0.5)
#     time2 = datetime.now()
#         
#     print(time2 - time1 > timedelta(seconds=0))
#     print(time2 - time1 > timedelta(seconds=1))
#     exit()
#     time_test()
#     driver2 = setupCn()
    print("IF RUNNING IN BACKGROUND DO NOT EXIT THIS WINDOW")
    print("HIT \"CONTROL-C\" TO END THE PROGRAM, AND THEN EXIT THE WINDOW") 

    containers, date, headless, delivery = queryContainers()
    targetDates, times = queryDatesAndTimes(containers[0]=="ALL")
    
    for i in range(len(containers)):
        containers[i]=containers[i].strip()
#     dates = "2018-06-19"
    driver = setupCn(headless)
#     sleep(100)
    def exit_hander():
        sleep(20)
        driver.quit()
     
    atexit.register(exit_hander)    
     
    getBetterRVs(driver, containers, date, times, targetDates, headless, delivery)
    
#     pyinstaller "C:\Users\ssleep\workspace\RV Changer Every Day\Automator\__init__.py" --distpath "J:\Spencer\RV Changer Constant" -y