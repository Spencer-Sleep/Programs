import email
import imaplib
import os
from exchangelib import DELEGATE, Account, Credentials
from exchangelib.attachments import FileAttachment, ItemAttachment
from exchangelib.items import Message
from time import sleep

class FetchEmail():
    connection = None
    error = None

    def __init__(self, mail_server, username, password):
        self.connection = imaplib.IMAP4_SSL(mail_server)
        self.connection.login(username, password)
        self.connection.select(readonly=False) # so we can mark mails as read

    def close_connection(self):
        """
        Close the connection to the IMAP server
        """
        self.connection.close()

    def save_attachment(self, msg, download_folder="/tmp"):
        """
        Given a message, save its attachments to the specified
        download folder (default is /tmp)

        return: file path to attachment
        """
        att_path = "No attachment found."
        for part in msg.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            if part.get('Content-Disposition') is None:
                continue

            filename = part.get_filename()
            att_path = os.path.join(download_folder, filename)

            if not os.path.isfile(att_path):
                fp = open(att_path, 'wb')
                fp.write(part.get_payload(decode=True))
                fp.close()
        return att_path

    def fetch_unread_messages(self):
        """
        Retrieve unread messages
        """
        emails = []
        (result, messages) = self.connection.search(None, 'UnSeen')
        if result == "OK":
            for message in messages[0].split(' '):
                try: 
                    ret, data = self.connection.fetch(message,'(RFC822)')
                except:
                    print ("No new emails to read.")
                    self.close_connection()
                    exit()

                msg = email.message_from_string(data[0][1])
                if isinstance(msg, str) == False:
                    emails.append(msg)
                response, data = self.connection.store(message, '+FLAGS','\\Seen')

            return emails

        self.error = "Failed to retreive emails."
        return emails

    def parse_email_address(self, email_address):
        """
        Helper function to parse out the email address from the message

        return: tuple (name, address). Eg. ('John Doe', 'jdoe@example.com')
        """
        return email.utils.parseaddr(email_address)
    
    



    
if __name__ == '__main__':
#     mapi/emsmdb/?MailboxId=8b3c9bfe-7977-46dd-aeaa-fac511e675d2@seaportint.com
#     fetcher = FetchEmail(r"https://exchange.mobinet.ca/", "ssleep", "ss#99PASS")
    
    
    credentials = Credentials(
    username='ssleep@seaportint.com',  # Or myusername@example.com for O365
    password='ss#99PASS'
    )
    account = Account(
        primary_smtp_address='POD@seaportint.com', 
        credentials=credentials, 
        autodiscover=True, 
        access_type=DELEGATE
    )
    
    
    
#     credentials = Credentials(
#     username='ssleep@seaportint.com',  # Or myusername@example.com for O365
#     password='ss#99PASS'
#     )
#     account = Account(
#         primary_smtp_address='spencer.sleep@seaportint.com', 
#         credentials=credentials, 
#         autodiscover=True, 
#         access_type=DELEGATE
#     )


#     print("here")
    # Print first 100 inbox messages in reverse order
    print(account.inbox.unread_count)
    while(False):
        for item in account.inbox.filter(is_read=False, sender="wordpress@seaportint.com"):
            for attachment in item.attachments:
                if isinstance(attachment, FileAttachment):
                    local_path = os.path.join("J:\PODs\\", attachment.name)
                    with open(local_path, 'wb') as f:
                        f.write(attachment.content)
                    print('Saved attachment to', local_path)
                elif isinstance(attachment, ItemAttachment):
                    if isinstance(attachment.item, Message):
                        print(attachment.item.subject, attachment.item.body)
            item.is_read=True
            item.save()
        sleep(30)
#     for item in account.inbox.all().order_by('-datetime_received')[:100]:
#         print("1")
#         print(item.subject, item.body, item.attachments)
#     print("here2")